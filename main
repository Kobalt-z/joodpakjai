local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Kobalt",
    SubTitle = "joodpakjai",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "house" }),
    Movement = Window:AddTab({ Title = "Movement", Icon = "arrow-up-right" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options
local movementSpeed = 1  -- Default speed value
local tpwalking = false
local deletedParts = {}  -- Table to store deleted parts
local noclipParts = {}  -- Table to store noclipped parts and their original states

-- Speed slider update function
local function onSpeedChanged(value)
    movementSpeed = value  -- Set movement speed from slider
end

-- Noclip Tool
local function createNoclipTool()
    local tool = Instance.new("Tool")
    tool.Name = "NoclipTool"
    tool.RequiresHandle = false
    tool.Parent = game.Players.LocalPlayer.Backpack
    
    tool.Activated:Connect(function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        local mouse = player:GetMouse()
        local target = mouse.Target
        
        if target and target.Parent and target.Parent ~= player.Character then
            -- If the part is not already noclipped, store the original properties and make it noclipped
            if not noclipParts[target] then
                noclipParts[target] = {
                    originalTransparency = target.Transparency,
                    originalCanCollide = target.CanCollide
                }
                -- Make the target part noclipped (transparent and no collision)
                target.CanCollide = false
                target.Transparency = 0.5
            else
                -- If the part is already noclipped, restore its original properties
                local original = noclipParts[target]
                target.CanCollide = original.originalCanCollide
                target.Transparency = original.originalTransparency
                -- Remove the part from the noclip list after restoring
                noclipParts[target] = nil
            end
        end
    end)

    return tool
end

-- Delete Tool
local function createDeleteTool()
    local tool = Instance.new("Tool")
    tool.Name = "DeleteTool"
    tool.RequiresHandle = false
    tool.Parent = game.Players.LocalPlayer.Backpack
    
    tool.Activated:Connect(function()
        local player = game.Players.LocalPlayer
        local mouse = player:GetMouse()
        local target = mouse.Target
        if target and target.Parent ~= player.Character then  -- Ignore player character
            -- Store the original size before resizing
            table.insert(deletedParts, {part = target, originalSize = target.Size})
            target.Size = Vector3.zero
            target.CanCollide = false
        end
    end)

    return tool
end

-- Restore Button for Deleted Parts
local function restoreDeletedParts()
    for _, deleted in pairs(deletedParts) do
        if deleted.part and deleted.part.Parent then
            deleted.part.Size = deleted.originalSize  -- Restore original size
            deleted.part.CanCollide = true
        end
    end
    deletedParts = {}  -- Clear the deleted parts list
end

-- Restore Button for Noclip Parts
local function restoreNoclipParts()
    for part, _ in pairs(noclipParts) do
        if part and part.Parent then
            local original = noclipParts[part]
            part.CanCollide = original.originalCanCollide
            part.Transparency = original.originalTransparency
            noclipParts[part] = nil
        end
    end
end

-- Movement Speed Control
game:GetService("RunService").Heartbeat:Connect(function()
    local speaker = game.Players.LocalPlayer
    local chr = speaker.Character
    if chr then
        local hum = chr:FindFirstChildWhichIsA("Humanoid")
        if hum then
            local delta = game:GetService("RunService").Heartbeat:Wait()
            if hum.MoveDirection.Magnitude > 0 then
                if movementSpeed then
                    chr:TranslateBy(hum.MoveDirection * tonumber(movementSpeed) * delta * 10)
                else
                    chr:TranslateBy(hum.MoveDirection * delta * 10)
                end
            end
        end
    end
end)

-- Tabs Setup
do
    -- Movement Speed Slider
    local Slider = Tabs.Movement:AddSlider("SpeedSlider", {
        Title = "Walking Speed",
        Description = "Adjust your walking speed",
        Default = 0,
        Min = 0,
        Max = 10,
        Rounding = 1,
        Callback = onSpeedChanged
    })

    -- Noclip Tool Button
    Tabs.Main:AddButton({
        Title = "Noclip Tool",
        Description = "Activate noclip tool",
        Callback = function()
            createNoclipTool()
        end
    })

    -- Delete Tool Button
    Tabs.Main:AddButton({
        Title = "Delete Tool",
        Description = "Activate delete tool",
        Callback = function()
            createDeleteTool()
        end
    })

    -- Restore Deleted Parts Button
    Tabs.Main:AddButton({
        Title = "Restore Parts",
        Description = "Restore deleted parts",
        Callback = function()
            restoreDeletedParts()
        end
    })

    -- Restore Noclip Parts Button
    Tabs.Main:AddButton({
        Title = "Restore Noclip Parts",
        Description = "Restore all noclipped parts",
        Callback = function()
            restoreNoclipParts()
        end
    })
end

-- Addons:
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("Kobalt")
SaveManager:SetFolder("Kobalt/joodpakjai")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Kobalt",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
